<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move canvas camera with arrow keys
var move_speed = 16;
if (keyboard_check(vk_up))
    view_yview[1] -= move_speed;
if (keyboard_check(vk_down))
    view_yview[1] += move_speed;
if (keyboard_check(vk_left))
    view_xview[1] -= move_speed;
if (keyboard_check(vk_right))
    view_xview[1] += move_speed;

// clamp canvas camera position to bounds of the canvas
view_xview[1] = clamp(view_xview[1], ED_XOFF, max(ED_XOFF, ED_XOFF+(global.map_tile_width*TILE_SIZE)-view_wview[1]));
view_yview[1] = clamp(view_yview[1], ED_YOFF, max(ED_YOFF, ED_YOFF+(global.map_tile_height*TILE_SIZE)-view_hview[1]));

// Use scroll wheel to switch between cursor options
if (mouse_wheel_up() || keyboard_check_pressed(vk_pageup)) {
    if (global.current_mode == EDIT_OBJECT) 
        global.object_selection = clamp_wrap(global.object_selection+1, 0, global.tile_object_count_special-1);
    else if (global.current_mode == EDIT_TILE) 
        global.tile_type_selection = clamp_wrap(global.tile_type_selection+1, 0, global.tile_type_count-1);
}

if (mouse_wheel_down() || keyboard_check_pressed(vk_pagedown)) {
    if (global.current_mode == EDIT_OBJECT) 
        global.object_selection = clamp_wrap(global.object_selection-1, 0, global.tile_object_count_special-1);
    else if (global.current_mode == EDIT_TILE) 
        global.tile_type_selection = clamp_wrap(global.tile_type_selection-1, 0, global.tile_type_count-1);
}

if (mouse_x &gt; ED_XOFF &amp;&amp; mouse_x &lt; ED_XOFF+global.map_tile_width*TILE_SIZE 
 &amp;&amp; mouse_y &gt; ED_YOFF &amp;&amp; mouse_y &lt; ED_YOFF+global.map_tile_height*TILE_SIZE) {
    // Place objects at cursor
    if (mouse_check_button(mb_left)) {
        if (global.current_mode == EDIT_WALL)
            global.has_wall[tileid_x(mouse_x), tileid_y(mouse_y)] = true;
        else if (global.current_mode == EDIT_TILE)
            global.tile_type[tileid_x(mouse_x), tileid_y(mouse_y)] = global.tile_types[global.tile_type_selection];
        else if (global.current_mode == EDIT_OBJECT) {
            if (global.tile_object_types[global.object_selection] == SPEAR_SPAWN) {
                // First check that a spear is not already at this position.
                var can_place = true;
                for(i=0; i&lt;global.spear_count; i+=1) {
                    if (global.spear_tilex[i] == tileid_x(mouse_x) &amp;&amp; global.spear_tiley[i] == tileid_y(mouse_y)) {
                        can_place = false;
                        break;
                    }    
                }
                if (can_place) {
                    global.spear_tilex[global.spear_count] = tileid_x(mouse_x);
                    global.spear_tiley[global.spear_count] = tileid_y(mouse_y); 
                    global.spear_count += 1;
                }
            }
            else if (global.tile_object_types[global.object_selection] == ROCK_SPAWN) {
                // First check that a rock is not already at this position.
                var can_place = true;
                for(i=0; i&lt;global.rock_count; i+=1) {
                    if (global.rock_tilex[i] == tileid_x(mouse_x) &amp;&amp; global.rock_tiley[i] == tileid_y(mouse_y)) {
                        can_place = false;
                        break;
                    }    
                }
                if (can_place) {
                    global.rock_tilex[global.rock_count] = tileid_x(mouse_x);
                    global.rock_tiley[global.rock_count] = tileid_y(mouse_y); 
                    global.rock_count += 1;
                }
            }
            else
                global.tile_object_flag[tileid_x(mouse_x), tileid_y(mouse_y)] |= get_bitoption(global.tile_object_types[global.object_selection]);
        }
    }
    
    // Delete objects at cursor
    if (mouse_check_button(mb_right)) {
        if (global.current_mode == EDIT_WALL)
            global.has_wall[tileid_x(mouse_x), tileid_y(mouse_y)] = false;
     else if (global.current_mode == EDIT_TILE)
        global.tile_type[tileid_x(mouse_x), tileid_y(mouse_y)] = AIR;
        else if (global.current_mode == EDIT_OBJECT) {
            if (global.tile_object_types[global.object_selection] == SPEAR_SPAWN) {
                // Find the spear
                var spear_id = -1;
                for(i=0; i&lt;global.spear_count; i+=1) {
                    if (global.spear_tilex[i] == tileid_x(mouse_x) &amp;&amp; global.spear_tiley[i] == tileid_y(mouse_y)) {
                        spear_id = i;
                        break;
                    }    
                }
                delete_spear(spear_id);
            }
            else if (global.tile_object_types[global.object_selection] == ROCK_SPAWN) {
                // Find the rock
                var rock_id = -1;
                for(i=0; i&lt;global.rock_count; i+=1) {
                    if (global.rock_tilex[i] == tileid_x(mouse_x) &amp;&amp; global.rock_tiley[i] == tileid_y(mouse_y)) {
                        rock_id = i;
                        break;
                    }    
                }
                delete_rock(rock_id);
            }
            else
                global.tile_object_flag[tileid_x(mouse_x), tileid_y(mouse_y)] &amp;= get_invert_bitoption(global.tile_object_types[global.object_selection]);
        }           
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw all of the map images.
if (global.map_image_count &gt; 0) {
    for(i=0; i&lt;global.map_image_count; i+=1) {
        draw_sprite_ext(global.map_images[i], 0, ED_XOFF+global.camera_x[i], ED_YOFF+global.camera_y[i], 1, 1, 0, c_white, global.opacity_slider.percent);
    }
}

// Get tile bounds that are currently visible in the window. For performance reasons, we won't draw
// any of the tiles outside the range that is outside the visible range.
tile_minx = clamp(tileid_x(view_xview[1]), 0, global.map_tile_width-1);
tile_miny = clamp(tileid_y(view_yview[1]), 0, global.map_tile_height-1);
tile_maxx = clamp(tileid_x(view_xview[1]+view_wview[1]), 0, global.map_tile_width-1);
tile_maxy = clamp(tileid_y(view_yview[1]+view_hview[1]), 0, global.map_tile_height-1);

// Draw background walls
var tx, ty;
if (global.map_tile_width &gt; 0 &amp;&amp; global.map_tile_height &gt; 0) {
    draw_set_color(c_green);
    if (global.current_mode == EDIT_PREVIEW)
        draw_set_alpha(0.35);
    else if (global.current_mode == EDIT_WALL)
        draw_set_alpha(0.55);
    else
        draw_set_alpha(0);
    for(i=tile_minx; i&lt;=tile_maxx; i+=1) {
        for(j=tile_miny; j&lt;=tile_maxy; j+=1) {
            tx = ED_XOFF+i*TILE_SIZE;
            ty = ED_YOFF+j*TILE_SIZE;
            if (global.has_wall[i,j])
                draw_rectangle(tx, ty, tx+TILE_SIZE, ty+TILE_SIZE, false);
        }
    }
}

// Draw solid map tiles
if (global.map_tile_width &gt; 0 &amp;&amp; global.map_tile_height &gt; 0) {
    draw_set_color(c_aqua);
    if (global.current_mode == EDIT_PREVIEW || global.current_mode == EDIT_TILE)
        draw_set_alpha(0.25);
    else
        draw_set_alpha(0.1);
    for(i=tile_minx; i&lt;=tile_maxx; i+=1) {
        for(j=tile_miny; j&lt;=tile_maxy; j+=1) {
            tx = ED_XOFF+i*TILE_SIZE;
            ty = ED_YOFF+j*TILE_SIZE;
            for(k=0; k&lt;global.tile_type_count; k+=1) {
                if (global.tile_type[i,j] == global.tile_types[k])
                    render_tile_type_icon(global.tile_types[k], tx, ty);
            }
        }
    }
    draw_set_alpha(1);
}

// Draw tile objects
var tx, ty, has_exit;
if (global.map_tile_width &gt; 0 &amp;&amp; global.map_tile_height &gt; 0) {
    draw_set_color(c_yellow);
    for(i=tile_minx; i&lt;=tile_maxx; i+=1) {
        for(j=tile_miny; j&lt;=tile_maxy; j+=1) {
            if (global.tile_object_flag[i,j] == 0)
                continue;
            tx = ED_XOFF+i*TILE_SIZE;
            ty = ED_YOFF+j*TILE_SIZE;
            has_exit = false;
            for(k=0; k&lt;global.tile_object_count; k+=1) {
                if (global.current_mode == EDIT_PREVIEW || (global.current_mode == EDIT_OBJECT &amp;&amp; global.tile_object_types[global.object_selection] == global.tile_object_types[k]))
                    draw_set_alpha(0.75);
                else
                    draw_set_alpha(0.2);
                if (global.tile_object_flag[i,j] &amp; get_bitoption(global.tile_object_types[k]) == get_bitoption(global.tile_object_types[k])) {
                    if (global.tile_object_types[k] == PIPE_PATH &amp;&amp; has_exit) {
                        if (global.current_mode == EDIT_PREVIEW)
                            draw_set_alpha(0.25);
                        else if (global.current_mode == EDIT_OBJECT &amp;&amp; global.tile_object_types[global.object_selection] == global.tile_object_types[k])
                            draw_set_alpha(0.75);
                        else
                            draw_set_alpha(0.1);
                    }
                    render_tile_object_icon(global.tile_object_types[k], tx, ty);
                    if (global.tile_object_types[k] == EXIT_MONSTER || global.tile_object_types[k] == EXIT_REGIONAL || global.tile_object_types[k] == EXIT_ROOM || global.tile_object_types[k] == EXIT_SCAV)
                        has_exit = true;
                }
            }
        }
    }
}

// Draw Spears/Rocks
if (global.current_mode == EDIT_PREVIEW || (global.current_mode == EDIT_OBJECT &amp;&amp; global.tile_object_types[global.object_selection] == SPEAR_SPAWN))
    draw_set_alpha(0.75);
else
    draw_set_alpha(0.1);
for(i=0; i&lt;global.spear_count; i+=1) {
    tx = ED_XOFF+global.spear_tilex[i]*TILE_SIZE;
    ty = ED_YOFF+global.spear_tiley[i]*TILE_SIZE;
    render_tile_object_icon(SPEAR_SPAWN, tx, ty);   
}
if (global.current_mode == EDIT_PREVIEW || (global.current_mode == EDIT_OBJECT &amp;&amp; global.tile_object_types[global.object_selection] == ROCK_SPAWN))
    draw_set_alpha(0.75);
else
    draw_set_alpha(0.1);
for(i=0; i&lt;global.rock_count; i+=1) {
    tx = ED_XOFF+global.rock_tilex[i]*TILE_SIZE;
    ty = ED_YOFF+global.rock_tiley[i]*TILE_SIZE;
    render_tile_object_icon(ROCK_SPAWN, tx, ty);  
}

// Draw our editing cursor over the tile currently being hovered on.
if (global.current_mode == EDIT_OBJECT) {
    draw_set_color(c_lime);
    draw_set_alpha(1);
} else if (global.current_mode == EDIT_TILE) {
    draw_set_color(c_aqua);
    draw_set_alpha(1);
} else {
    draw_set_color(c_green);
    draw_set_alpha(0.5);
}
if (global.current_mode != EDIT_PREVIEW &amp;&amp; mouse_x &gt; ED_XOFF &amp;&amp; mouse_x &lt; ED_XOFF+global.map_tile_width*TILE_SIZE 
 &amp;&amp; mouse_y &gt; ED_YOFF &amp;&amp; mouse_y &lt; ED_YOFF+global.map_tile_height*TILE_SIZE) {
    if (global.current_mode == EDIT_WALL)
        draw_rectangle(snap_x(mouse_x), snap_y(mouse_y), snap_x(mouse_x)+TILE_SIZE, snap_y(mouse_y)+TILE_SIZE, false);
    else if (global.current_mode == EDIT_TILE)
        render_tile_type_icon(global.tile_types[global.tile_type_selection], snap_x(mouse_x), snap_y(mouse_y));
    else if (global.current_mode == EDIT_OBJECT)
        render_tile_object_icon(global.tile_object_types[global.object_selection], snap_x(mouse_x), snap_y(mouse_y));
    
    // Draw small cross-hair in place of mouse cursor.
    window_set_cursor(cr_none);
    draw_set_color(c_white);
    draw_set_alpha(1);
    draw_point(mouse_x, mouse_y);
    for(i=1; i&lt;=3; i+=1) {
        if (i &gt; 1)
            draw_set_color(c_black);
        else
            draw_set_color(c_white);
        draw_point(mouse_x-i, mouse_y);
        draw_point(mouse_x+i, mouse_y);
        draw_point(mouse_x, mouse_y-i);
        draw_point(mouse_x, mouse_y+i);
    }
} else
    window_set_cursor(cr_arrow);
draw_set_color(c_white);
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
