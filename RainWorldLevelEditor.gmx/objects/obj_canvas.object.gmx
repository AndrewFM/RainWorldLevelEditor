<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move canvas camera with arrow keys

var move_speed = 16;
if (keyboard_check(vk_up))
    view_yview[1] -= move_speed;
if (keyboard_check(vk_down))
    view_yview[1] += move_speed;
if (keyboard_check(vk_left))
    view_xview[1] -= move_speed;
if (keyboard_check(vk_right))
    view_xview[1] += move_speed;

// clamp canvas camera position to bounds of the canvas
view_xview[1] = clamp(view_xview[1], ED_XOFF, max(ED_XOFF, ED_XOFF+(global.map_tile_width*TILE_SIZE)-view_wview[1]));
view_yview[1] = clamp(view_yview[1], ED_YOFF, max(ED_YOFF, ED_YOFF+(global.map_tile_height*TILE_SIZE)-view_hview[1]));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw all of the map images.
if (global.map_image_count &gt; 0) {
    for(i=0; i&lt;global.map_image_count; i+=1) {
        draw_sprite_ext(global.map_images[i], 0, ED_XOFF+global.camera_x[i], ED_YOFF+global.camera_y[i], 1, 1, 0, c_white, 1);
    }
}

// Get tile bounds that are currently visible in the window. For performance reasons, we won't draw
// any of the tiles outside the range that is outside the visible range.
tile_minx = clamp(tileid_x(view_xview[1]), 0, global.map_tile_width-1);
tile_miny = clamp(tileid_y(view_yview[1]), 0, global.map_tile_height-1);
tile_maxx = clamp(tileid_x(view_xview[1]+view_wview[1]), 0, global.map_tile_width-1);
tile_maxy = clamp(tileid_y(view_yview[1]+view_hview[1]), 0, global.map_tile_height-1);

// Draw solid map tiles.
var tx, ty;
if (global.map_tile_width &gt; 0 &amp;&amp; global.map_tile_height &gt; 0) {
    draw_set_color(c_green);
    draw_set_alpha(0.35);
    for(i=tile_minx; i&lt;=tile_maxx; i+=1) {
        for(j=tile_miny; j&lt;=tile_maxy; j+=1) {
            tx = ED_XOFF+i*TILE_SIZE;
            ty = ED_YOFF+j*TILE_SIZE;
            if (global.tile_type[i,j] == SOLID)
                draw_rectangle(tx, ty, tx+TILE_SIZE, ty+TILE_SIZE, false);
            else if (global.tile_type[i,j] == PIPE_ENT)
                draw_circle(tx+TILE_SIZE/2, ty+TILE_SIZE/2, TILE_SIZE/2, false);
            else if (global.tile_type[i,j] == FLOOR)
                draw_rectangle(tx, ty+TILE_SIZE*0.3, tx+TILE_SIZE, ty+TILE_SIZE*0.6, false);
            else if (global.tile_type[i,j] == SLOPE) {
                if ((i+1 &gt;= global.map_tile_width || global.tile_type[i+1,j] == AIR) 
                 &amp;&amp; (j-1 &lt; 0 || global.tile_type[i,j-1] == AIR))
                    draw_triangle(tx, ty, tx, ty+TILE_SIZE, tx+TILE_SIZE, ty+TILE_SIZE, false);
                else if ((i-1 &lt; 0 || global.tile_type[i-1,j] == AIR)
                 &amp;&amp; (j-1 &lt; 0 || global.tile_type[i,j-1] == AIR))
                    draw_triangle(tx+TILE_SIZE, ty, tx+TILE_SIZE, ty+TILE_SIZE, tx, ty+TILE_SIZE, false);
                else if ((i+1 &gt;= global.map_tile_width || global.tile_type[i+1,j] == AIR)
                 &amp;&amp; (j+1 &gt;= global.map_tile_height || global.tile_type[i,j+1] == AIR))
                    draw_triangle(tx, ty, tx, ty+TILE_SIZE, tx+TILE_SIZE, ty, false);
                else
                    draw_triangle(tx+TILE_SIZE, ty, tx+TILE_SIZE, ty+TILE_SIZE, tx, ty, false);
            }
        }
    }
    draw_set_alpha(1);
}


// Draw a rectangular mark over the tile currently being hovered on.
draw_set_color(c_green);
draw_set_alpha(0.5);
if (mouse_x &gt; ED_XOFF &amp;&amp; mouse_y &gt; ED_YOFF) {
    draw_rectangle(snap_x(mouse_x), snap_y(mouse_y), snap_x(mouse_x)+TILE_SIZE, snap_y(mouse_y)+TILE_SIZE, false);
    window_set_cursor(cr_none);
} else
    window_set_cursor(cr_arrow);
draw_set_color(c_white);
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
