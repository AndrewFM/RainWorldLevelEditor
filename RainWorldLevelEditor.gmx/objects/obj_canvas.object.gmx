<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canvas_width = 0;
canvas_height = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move canvas camera with arrow keys

var move_speed = 16;
if (keyboard_check(vk_up))
    view_yview[1] -= move_speed;
if (keyboard_check(vk_down))
    view_yview[1] += move_speed;
if (keyboard_check(vk_left))
    view_xview[1] -= move_speed;
if (keyboard_check(vk_right))
    view_xview[1] += move_speed;

// clamp canvas camera position to bounds of the canvas
view_xview[1] = clamp(view_xview[1], ED_XOFF, max(ED_XOFF, ED_XOFF+canvas_width-view_wview[1]));
view_yview[1] = clamp(view_yview[1], ED_YOFF, max(ED_YOFF, ED_YOFF+canvas_height-view_hview[1]));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw all of the map images.
if (global.map_image_count &gt; 0) {
    canvas_width = 0;
    for(i=0; i&lt;global.map_image_count; i+=1) {
        draw_sprite_ext(global.map_images[i], 0, ED_XOFF+canvas_width, ED_YOFF, 1, 1, 0, c_white, 0.5);
        canvas_width += sprite_get_width(global.map_images[i]);
        canvas_height = max(canvas_height, sprite_get_height(global.map_images[i]));
    }
}

// Draw a rectangular mark over the tile currently being hovered on.
draw_set_color(c_green);
draw_set_alpha(0.5);
if (mouse_x &gt; ED_XOFF &amp;&amp; mouse_y &gt; ED_YOFF) {
    draw_rectangle(snap_x(mouse_x), snap_y(mouse_y), snap_x(mouse_x)+TILE_SIZE, snap_y(mouse_y)+TILE_SIZE, false);
    window_set_cursor(cr_none);
} else
    window_set_cursor(cr_arrow);
draw_set_color(c_white);
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
